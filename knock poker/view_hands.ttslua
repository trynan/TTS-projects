-- requires the following global vars:

-- PLAYER_COLORS - list of all player colors (in order)
-- invisCardPlace - list of scripting zones as references for
    -- where to put the invisible cards (indexes are player colors)
-- cards - list of num of cards per player (indexes are player colors)
-- handZone - list of hand zones (indexes are player colors)
-- GATHERING - bool of whether deck is currently being reset
-- KNOCKED - bool of whether someone has knocked yet
-- TURN - int, only incremented after knocking to know when the round is over
-- invisCardCount - list of scripting zones that contain all invisible
    -- cards in front of players (indexes are player colors)

function spawn_card(p, c) -- p is player, c is card
    local rot = invisCardPlace[p].getRotation()
    local pos = invisCardPlace[p].getPosition()
    local right = invisCardPlace[p].getTransformRight()
    local rot = {rot.x, rot.y + 180, rot.z}
    local c = spawnObjectData({
        data     = c.getData(),
        position = { -- move in the direction of right by 2 times # of cards
            pos.x + (right.x * 2 * cards[p]),
            0.97,
            pos.z + (right.z * 2 * cards[p])
        },
        rotation = rot,
        scale    = {0.9, 1, 0.9}
    })
    c.setInvisibleTo(PLAYER_COLORS)
    c.getComponent("AudioSource").set("mute", true) -- mute the card's sounds
    c.interactable = false
    c.locked = true
    cards[p] = cards[p] + 1
end

function onObjectEnterZone(zone, obj)
    if obj.type == "Card" or obj.type == "Deck" then
        for p,z in pairs(handZone) do
            if zone == z then -- card entered hand zone
                if cards[p] < 0 then
                    cards[p] = 0
                end
                spawn_card(p, obj)
                return
            end
        end
    end
end

function onObjectLeaveZone(zone, obj)
    if not GATHERING and (obj.type == "Card" or obj.type == "Deck") then -- when resetting decks, we want to ignore when cards leave scripting zones
        for p,z in pairs(handZone) do
            if zone == z then -- when a card leaves a hand zone:
                local t = obj.getTags()[1]
                for _,card in ipairs(invisCardCount[p].getObjects()) do
                    -- find the invisible card in front of the player with the same
                    -- tag as the card that left their hand zone.
                    if card.getTags()[1] == t then
                        card.destruct()
                        cards[p] = cards[p] - 1
                        break
                    end
                end
                reference_player = p
                -- coroutine to shift cards to the left
                startLuaCoroutine(Global, "reset_invis_cards")
            end
        end
    end
end

function reset_invis_cards()
    wait(math.random(0, 10))
    wait(math.random(0, 10))
    local p = reference_player
    cards[p] = 0
    -- delete current cards
    for _,card in ipairs(invisCardCount[p].getObjects()) do
        if card.getScale()[1] < 1 then
            card.destruct()
        end
    end
    for _,card in ipairs(handZone[p].getObjects()) do
        spawn_card(p, card)
    end
    return 1
end

function onObjectDrop(color, obj)
    -- if obj.type == "Card" and #Player[color].getSelectedObjects() < 1 then
    if obj.type == "Card" then
        for p,z in pairs(handZone) do
            for i, oz in ipairs(obj.getZones()) do
                if z == oz then -- card was dropped within a player's hand
                    -- print(obj.getTags()[1], ' in ', p, "'s hand zone")
                    reference_player = p
                    startLuaCoroutine(Global, "reset_invis_cards")
                    return
                end
            end
        end
        for i,z in ipairs(obj.getZones()) do
            if z == discZone then
                if color == Turns.turn_color then
                    if KNOCKED then TURN = TURN + 1 end
                    if KNOCKED and TURN == #getSeatedPlayers() then
                        -- disable turns after one loop around the table
                        -- after the knock
                        Turns.enable = false
                    else
                        Turns.turn_color = Turns.getNextTurnColor()
                    end
                end
            end
        end
    end
end
