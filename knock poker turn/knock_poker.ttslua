-- script by trynan
#include view_hands
#include create_counter
#include utils
#include !/console++

-- MAIN SCRIPT STARTS HERE
--------------------------------------------------------------------------------
-- Setup

local chipGUID      = "e2245e"
local knockCubeGUID = "904cc4"
local deckZoneGUID  = "e5f68a"
local discZoneGUID  = "5c4e38"
local handZoneGUIDS = { "5f2903", "901020", "fb2a55", "8d5a9d", "00adfa", "892348", "2ab270", "6a9881" }

console.autoexec = [[
    cmd
]]

function getZoneParams(pos, rot, sc)
    local zoneParams = {
        type = "ScriptingTrigger",
        position = pos,
        rotation = rot,
        scale = sc
    }
    return zoneParams
end

function vector_move(transform_data, dx, dy, dz)
    -- given transform data, move position (locally) right by dx, up by dy, forward by dz
    local pos       = transform_data.position
    local rightDir  = transform_data.right -- x
    local upDir     = transform_data.up -- y
    local forwDir   = transform_data.forward -- z
    return pos + (dx * rightDir) + (dy * upDir) + (dz * forwDir)
end

function onLoad(counter_data)
    -- first remove all scripting zones and counters so the spawned set doesn't stack on top
    for _,z in ipairs(getObjects()) do
        if z.type == "Scripting" and z.guid ~= deckZoneGUID and z.guid ~= discZoneGUID then
            z.destruct()
        elseif z.type == "Block" and z.getScale()[1] < 1.5 then
            z.destruct()
        elseif z.type == "Card" and z.getScale()[1] < 1 then
            -- also remove any leftover small cards if they happen to exist
            z.destruct()
        end
    end
    -- set up global variables
    -- PLAYER_COLORS = Player.getAvailableColors()
    PLAYER_COLORS = { "White", "Red", "Orange", "Yellow", "Green", "Blue", "Purple", "Pink" }
    GATHERING = false
    KNOCKED = false
    KNOCKER = nil
    CURRENT_TURN = nil
    ROTATIONS = {}
    squareZones = {}
    chipZones = {}
    invisCardPlace = {}
    invisCardCount = {}
    handZone = {}
    counter = {}
    cards = {}
    -- initialize all of these
    for i,player in ipairs(PLAYER_COLORS) do
        ROTATIONS[player] = 45 * (i - 1)
        handZone[player] = getObjectFromGUID(handZoneGUIDS[i])
        local handT = Player[player].getHandTransform()
        local chipPos       = vector_move(handT, 4, 0, 9)
        local squarePos     = vector_move(handT, -4, 0, 4)
        local invisPlacePos = vector_move(handT, -4.5, 0, 6.5)
        local invisCountPos = vector_move(handT, 0, -2.24, 6.5)
        local counterPos    = vector_move(handT, 0, -2.53, 4)
        squareZones[player]     = spawnObject(getZoneParams(squarePos, handT.rotation, {1, 5.1, 1}))
        chipZones[player]       = spawnObject(getZoneParams(chipPos, handT.rotation, {1, 5.1, 1}))
        invisCardPlace[player]  = spawnObject(getZoneParams(invisPlacePos, handT.rotation, {1, 5.1, 1}))
        invisCardCount[player]  = spawnObject(getZoneParams(invisCountPos, handT.rotation, {10, 1, 1}))
        cards[player] = 0
        counter[player] = spawnCounter(player, handT, counterPos)
        create_counter(counter[player])
    end

    deckZone = getObjectFromGUID(deckZoneGUID)
    discZone = getObjectFromGUID(discZoneGUID)
    chip = getObjectFromGUID(chipGUID)
    knockCube = getObjectFromGUID(knockCubeGUID)
    knockCube.setPosition({-4.14, 2.05, 0.00})
    chip.interactable = false
    chip.setPosition({0.00, 1.25, -4.52})
    chip.setRotation({0, 0, 0})
    chip.createButton({
        click_function = "nothin",
        label = "Current\nDealer",
        position = {0, 0.23, 0},
        rotation = {0, 180, 0},
        width = 500,
        height = 500,
        font_size = 125,
        tooltip = "Current\nDealer",
        color = {0, 0, 0},
        font_color = {1, 1, 1}
    })
    getDeck(deckZone).randomize()
    console.load()
end

--------------------------------------------------------------------------------
-- Main Gameplay Functions

function gather()
    GATHERING = true
    KNOCKED = false
    KNOCKER = nil
    CURRENT_TURN = nil
    UI.setAttribute("knock_row", "active", "false")
    UI.setAttribute("gather_cell", "columnspan", "1")
    UI.setAttribute("deal_cell", "active", "true")
    UI.hide("turn")
    knockCube.setPosition({-4.14, 2.05, 0.00})
    knockCube.setRotation({0, 0, 0})
    for i,o in ipairs(getObjects()) do
        if o.type == "Deck" or o.type == "Card" then
            -- the scale stuff here is only for the invisible cards that spectators can see.
            -- those cards are smaller than the regular cards, they should just
            -- be destroyed on deck reset
            if o.getScale()[1] > 1 then
                o.setRotation({0, 180, 180})
                o.setPosition({0.00, 1.67, 0.00})
            else
                o.destruct()
            end
        end
    end
    for p,c in pairs(cards) do
        cards[p] = 0
    end
    Wait.frames(function() GATHERING = false end, 10)
end

function dealCards(player)
    next_turn(player.color)
    ref_c = player.color
    UI.setAttribute("knock_row", "active", "true")
    UI.setAttribute("deal_cell", "active", "false")
    UI.setAttribute("gather_cell", "columnspan", "2")
    UI.setAttribute("turn", "active", "true")
    chip.setPositionSmooth({chipZones[ref_c].getPosition()[1], 0.96, chipZones[ref_c].getPosition()[3]}, false, false)
    chip.setRotation({0, ROTATIONS[ref_c], 0})
    startLuaCoroutine(Global, "deal_cards_cr")
end

function deal_cards_cr()
    -- create new list of "next player" based on who is seated
    local newNextPlayerList = newNextPlayers()
    for _,o in ipairs(deckZone.getObjects()) do
        if o.type == "Deck" and o.getScale()[1] > 1 then
            o.randomize()
            wait(10)
            local p = ref_c -- p starts as the color that pressed the button
            while #o.getObjects() > (52 - (5 * #getSeatedPlayers())) do
                wait(2)
                p = newNextPlayerList[p] -- make p the next player to get the card after each iteration
                o.deal(1, p)
            end
            o.takeObject({
                position = {4.13, 2, 0.00},
                flip = true,
                smooth = true
            })
        end
    end
    return 1
end

function knock(player)
    if KNOCKED then
        broadcastToColor("Someone already knocked!", player.color)
        overrideKnockPrompt(player)
        return
    end
    KNOCKED = true
    KNOCKER = player.color
    next_turn(player.color)
    knockCube.setPositionSmooth({squareZones[player.color].getPosition()[1], 6, squareZones[player.color].getPosition()[3]}, false, false)
    knockCube.setRotation({0, ROTATIONS[player.color], 0})
    local msg = (Player[player.color].steam_name or player.color) .. " has knocked!"
    broadcastToAll(msg, player.color)
end

function next_turn(prev)
    local p = newNextPlayers()[prev]
    if KNOCKED and p == KNOCKER then
        UI.setAttribute("turn", "active", "false")
        -- UI.hide("turn")
        return
    end
    CURRENT_TURN = p
    -- UI.hide("turn")
    UI.setAttribute("turn", "visibility", p .. "|Black")
    UI.setAttribute("turn_text", "color", p)
    -- UI.show("turn")
end

--------------------------------------------------------------------------------
-- Misc. Button Functions

function clear_buttons()
    for p,b in pairs(counter) do
        b.editButton({index = 2, label = 0, tooltip = 0})
    end
end

function button_toggle()
    local params = {}
    if UI.getAttribute("deal_cell", "active") == "false" then
        params = {"true", "1", "false"}
    else
        params = {"false", "2", "true"}
    end
    UI.setAttribute("deal_cell", "active", params[1])
    UI.setAttribute("gather_cell", "columnspan", params[2])
    UI.setAttribute("knock_row", "active", params[3])
end

function overrideKnockPrompt(player)
    UI.setAttributes("override", {
        active="true",
        visibility=player.color
    })
end

function cancelOverride()
    UI.setAttribute("override", "active", "false")
end

function overrideKnock(player)
    UI.setAttribute("override", "active", "false")
    KNOCKED = false
    KNOCKER = nil
    knock(player)
end

function cancelKnock()
    KNOCKED = false
    KNOCKER = nil
    knockCube.setPositionSmooth({-4.14, 2.05, 0.00}, false, false)
    knockCube.setRotation({0, 0, 0})
end

function nothin() end
